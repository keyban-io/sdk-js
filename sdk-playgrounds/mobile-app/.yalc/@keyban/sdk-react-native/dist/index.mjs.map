{"version":3,"sources":["../src/eddsa/hooks/client.ts","../src/eddsa/provider/index.tsx","../src/eddsa/wasmBridge/nativeWasm.ts"],"names":["useContext","createContext","useCallback","useRef","useState","EddsaClient","useWebViewMessage","WebView","import_compiled","generateUUID","hexToU8a","u8aToHex","NativeWasm","emitFn","_","_1","num1","num2","callId","addPayload","resultString","_a","messageHex","decodedGenericMessage","payload","resFn","arrayBufferMessage","callback","res","rej","jsx","jsxs","KeybanEddsaContext","KeybanEddsaProvider","children","storageProvider","webApp","wasmApiRef","eddsaClientRef","initialized","setInitialized","ref","onMessage","emit","message","_b","_m","add","useKeybanEddsa","context"],"mappings":"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","sourcesContent":["import { useContext } from \"react\";\nimport { KeybanEddsaContext } from \"../provider\";\n\nexport const useKeybanEddsa = () => {\n  const context = useContext(KeybanEddsaContext);\n\n  if (!context) {\n    throw new Error(\"useKeyban hook must be used inside KeybanProvider\");\n  }\n\n  return context;\n};\n","import {\n  createContext,\n  type ReactNode,\n  useCallback,\n  useRef,\n  useState,\n} from \"react\";\nimport { type KeybanEddsaContext as ConetxtType, ErrorCodes } from \"./types\";\nimport { EddsaClient } from \"@keyban/sdk-base\";\nimport { useWebViewMessage } from \"react-native-react-bridge\";\nimport WebView from \"react-native-webview\";\nimport { NativeWasm } from \"../wasmBridge/nativeWasm\";\n\nexport const KeybanEddsaContext = createContext<null | ConetxtType>(null);\n\nexport const KeybanEddsaProvider = ({\n  children,\n  storageProvider,\n  webApp,\n}: {\n  children: ReactNode;\n  storageProvider: ConetxtType[\"storageProvider\"];\n  webApp: string;\n}) => {\n  const wasmApiRef = useRef<NativeWasm | null>(null);\n  const eddsaClientRef = useRef<ConetxtType[\"eddsaClient\"] | null>(null);\n  const [initialized, setInitialized] = useState(false);\n\n  const { ref, onMessage, emit } = useWebViewMessage(async (message) => {\n    if (message.type === \"initialized\") {\n      console.log(\"WebAssembly initialized inside WebView\");\n      wasmApiRef.current = new NativeWasm(emit);\n      eddsaClientRef.current = new EddsaClient(wasmApiRef.current, {\n        get: (_) => Promise.resolve(\"1\"),\n        save: (_, _m) => Promise.resolve(true),\n      });\n      await eddsaClientRef.current?.initialize();\n      setInitialized(true);\n      return;\n    }\n\n    wasmApiRef.current?.receiveMessage(message.data as string);\n  });\n\n  const add: ConetxtType[\"add\"] = useCallback(\n    (num1: number, num2: number) => {\n      if (!initialized || !eddsaClientRef.current) {\n        throw new Error(ErrorCodes.NOT_INITIALIZED);\n      }\n\n      return eddsaClientRef.current.add(num1, num2);\n    },\n    [initialized]\n  );\n\n  return (\n    <KeybanEddsaContext.Provider\n      value={{\n        storageProvider,\n        eddsaClient: eddsaClientRef.current,\n        wasmApi: wasmApiRef.current,\n        initialized,\n        add,\n      }}\n    >\n      <WebView\n        ref={ref}\n        style={{ display: \"none\" }}\n        webviewDebuggingEnabled\n        cacheEnabled={false}\n        source={{ html: webApp }}\n        onMessage={onMessage}\n      />\n      {children}\n    </KeybanEddsaContext.Provider>\n  );\n};\n","import { generateUUID, hexToU8a, u8aToHex } from \"@keyban/sdk-base\";\nimport type { WasmApi } from \"@keyban/sdk-base\";\nimport {\n  EddsaAddRequest,\n  EddsaAddResponse,\n  GenericMessage,\n} from \"~/../compiled\";\n\ntype PromiseResolveFn = (data: string) => void;\ntype EmitFn = (params: { type: keyof WasmApi; data: string }) => void;\n\nexport class NativeWasm implements WasmApi {\n  promiseMap = new Map<string, PromiseResolveFn>();\n  emitFn: EmitFn | null = null;\n  constructor(emitFn: (params: { type: string; data: string }) => void) {\n    this.promiseMap = new Map<string, PromiseResolveFn>();\n    this.emitFn = emitFn;\n  }\n\n  signMessage = (_: string, _1: string): Promise<string> => {\n    return Promise.resolve(\"\");\n  };\n\n  generateKeypair = (): Promise<unknown> => {\n    return Promise.resolve(\"\");\n  };\n\n  async add(num1: number, num2: number): Promise<number> {\n    this.ensureEmitFn();\n    const callId = generateUUID(); // this should be random uuid\n    const addPayload = EddsaAddRequest.encode({\n      num1,\n      num2,\n    }).finish();\n\n    const resultString = await this.promisifyMessage(() => {\n      this.emitFn?.({\n        type: \"add\",\n        data: this.prepareGenericMessage(callId, u8aToHex(addPayload)),\n      });\n    }, callId);\n\n    const decodedResult = EddsaAddResponse.decode(hexToU8a(resultString));\n\n    return decodedResult.sum;\n  }\n\n  // UTILS\n\n  ensureEmitFn() {\n    if (!this.emitFn) {\n      throw new Error(\"critical: missing emmit function\");\n    }\n\n    return true;\n  }\n  receiveMessage(messageHex: string) {\n    const decodedGenericMessage = GenericMessage.decode(hexToU8a(messageHex));\n    const { callId, payload } = decodedGenericMessage;\n    const resFn = this.promiseMap.get(callId);\n\n    if (!resFn) return;\n    this.promiseMap.delete(callId);\n\n    resFn(payload);\n  }\n\n  prepareGenericMessage(callId: string, payload: string) {\n    const arrayBufferMessage = GenericMessage.encode({\n      callId,\n      payload,\n    }).finish();\n    return u8aToHex(arrayBufferMessage);\n  }\n\n  promisifyMessage(callback: () => void, callId: string): Promise<string> {\n    return new Promise((res, rej) => {\n      callback();\n      this.promiseMap.set(callId, res);\n\n      // timeout after 10seconds\n      setTimeout(rej, 10_000);\n    });\n  }\n}\n"]}
