// import {
//   initSync as initWasm,
//   type InitOutput as WasmInstance,
// } from "eddsa-wasm-client";
// import wasm from "./";
import initSync, { InitOutput, dkg, add } from "eddsa-wasm-client";

// const fetchWasmBuffer = async () =>
//   Uint8Array.from([
//     0x00, 0x61, 0x73, 0x6d, 0x01, 0x00, 0x00, 0x00, 0x01, 0x87, 0x80, 0x80,
//     0x80, 0x00, 0x01, 0x60, 0x02, 0x7f, 0x7f, 0x01, 0x7f, 0x03, 0x82, 0x80,
//     0x80, 0x80, 0x00, 0x01, 0x00, 0x07, 0x87, 0x80, 0x80, 0x80, 0x00, 0x01,
//     0x03, 0x61, 0x64, 0x64, 0x00, 0x00, 0x0a, 0x8d, 0x80, 0x80, 0x80, 0x00,
//     0x01, 0x87, 0x80, 0x80, 0x80, 0x00, 0x00, 0x20, 0x00, 0x20, 0x01, 0x6a,
//     0x0b,
//   ]);

const initWasm = async (): Promise<InitOutput> => {
  try {
    // Construct the URL to the WASM file
    //const route = new URL("./eddsa_wasm_client_bg.wasm", import.meta.url);
    const response = await initSync();

    console.log("Fetch response:", response);

    return response;
  } catch (e) {
    console.error("Error loading WASM:", e);
    throw e;
  }
};
export { initWasm, dkg, add };
